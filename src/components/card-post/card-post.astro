---
const { title, description, date, url } = Astro.props;

import "./card-post.css";
---

<article class="card-post">
  <h3 class="card-post__title">
    <a href={url}>
      {title}
    </a>
  </h3>
  <time-ago date={date}
    ><time datetime={date} class="card-post__time-ago"></time>
  </time-ago>
  <p class="card-post__description">{description}</p>
  <a href={url} class="card-post__action-inline">Leer art√≠culo completo</a>
</article>

<script>
  class TimeAgo extends HTMLElement {
    #date;
    #dateTime;
    #timeHTMLElement;
    DATE_UNITS = {
      year: 31_104_000,
      month: 2_419_200,
      week: 604_800,
      day: 86_400,
      hour: 3600,
      minute: 60,
      second: 1,
    };

    constructor() {
      super();
      this.#date = this.getAttribute("date");
      this.#dateTime = new Date(this.#date);
      this.#timeHTMLElement = this.querySelector("time");
    }

    getSecondsDiff = () => (Date.now() - this.#dateTime) / 1000;

    getUnitAndValueDate(seconsElapsed) {
      for (const [unit, secondsUnit] of Object.entries(this.DATE_UNITS)) {
        if (seconsElapsed >= secondsUnit || unit === "second") {
          const value = Math.floor(seconsElapsed / secondsUnit) * -1;
          return { value, unit };
        }
      }
    }

    getTimeAgo(locale = "es") {
      const rtf = new Intl.RelativeTimeFormat(locale);
      const seconsElapsed = this.getSecondsDiff();
      const { value, unit } = this.getUnitAndValueDate(seconsElapsed);
      return rtf.format(value, unit);
    }

    connectedCallback() {
      const timeagoString = this.getTimeAgo();
      this.#timeHTMLElement.innerHTML = timeagoString;
    }
  }

  customElements.define("time-ago", TimeAgo);
</script>
